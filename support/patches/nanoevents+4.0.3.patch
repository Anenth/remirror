diff --git a/node_modules/nanoevents/index.d.ts b/node_modules/nanoevents/index.d.ts
index 60bc049..0afb4e3 100644
--- a/node_modules/nanoevents/index.d.ts
+++ b/node_modules/nanoevents/index.d.ts
@@ -1,56 +1,58 @@
-interface EventsMap {
-  [event: string]: any
-}
+declare namespace createNanoEvents {
+  interface EventsMap {
+    [event: string]: any
+  }
 
-interface DefaultEvents extends EventsMap {
-  [event: string]: (...args: any) => void
-}
+  interface DefaultEvents extends EventsMap {
+    [event: string]: (...args: any) => void
+  }
 
-declare class Emitter<Events extends EventsMap> {
-  /**
-   * Event names in keys and arrays with listeners in values.
-   *
-   * ```js
-   * emitter1.events = emitter2.events
-   * emitter2.events = { }
-   * ```
-   */
-  events: Partial<{ [E in keyof Events]: Events[E][] }>
+  class Emitter<Events extends EventsMap> {
+    /**
+     * Event names in keys and arrays with listeners in values.
+     *
+     * ```js
+     * emitter1.events = emitter2.events
+     * emitter2.events = { }
+     * ```
+     */
+    events: Partial<{ [E in keyof Events]: Events[E][] }>
 
-  /**
-   * Add a listener for a given event.
-   *
-   * ```js
-   * const unbind = ee.on('tick', (tickType, tickDuration) => {
-   *   count += 1
-   * })
-   *
-   * disable () {
-   *   unbind()
-   * }
-   * ```
-   *
-   * @param event The event name.
-   * @param cb The listener function.
-   * @returns Unbind listener from event.
-   */
-  on <K extends keyof Events>(this: this, event: K, cb: Events[K]): () => void
+    /**
+     * Add a listener for a given event.
+     *
+     * ```js
+     * const unbind = ee.on('tick', (tickType, tickDuration) => {
+     *   count += 1
+     * })
+     *
+     * disable () {
+     *   unbind()
+     * }
+     * ```
+     *
+     * @param event The event name.
+     * @param cb The listener function.
+     * @returns Unbind listener from event.
+     */
+    on <K extends keyof Events>(this: this, event: K, cb: Events[K]): () => void
 
-  /**
-   * Calls each of the listeners registered for a given event.
-   *
-   * ```js
-   * ee.emit('tick', tickType, tickDuration)
-   * ```
-   *
-   * @param event The event name.
-   * @param args The arguments for listeners.
-   */
-  emit <K extends keyof Events>(
-    this: this,
-    event: K,
-    ...args: Parameters<Events[K]>
-  ): void
+    /**
+     * Calls each of the listeners registered for a given event.
+     *
+     * ```js
+     * ee.emit('tick', tickType, tickDuration)
+     * ```
+     *
+     * @param event The event name.
+     * @param args The arguments for listeners.
+     */
+    emit <K extends keyof Events>(
+      this: this,
+      event: K,
+      ...args: Parameters<Events[K]>
+    ): void
+  }
 }
 
 /**
@@ -72,7 +74,7 @@ declare class Emitter<Events extends EventsMap> {
  * }
  * ```
  */
-declare function createNanoEvents<Events extends EventsMap = DefaultEvents> (
-): Emitter<Events>
+declare function createNanoEvents<Events extends createNanoEvents.EventsMap = createNanoEvents.DefaultEvents> (
+): createNanoEvents.Emitter<Events>
 
 export = createNanoEvents
